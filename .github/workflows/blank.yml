# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
  metadata:
    runs-on: ubuntu-20.04
    outputs:
      ci_image_name: ${{ steps.ci_image_vars.outputs.ci_image_name }}
      ci_image_version: ${{ steps.ci_image_vars.outputs.ci_image_version }}
    steps:
      - name: Generate CI docker image name and version
        id: ci_image_vars
        # e.g. refs/head/feature/my-branch => $DOCKER_IMAGE-ci:my-branch
        run: |
          export branch_name="${GITHUB_HEAD_REF:-${GITHUB_REF}}"
          export ci_image_version="${branch_name##*/}"
          export ci_image_name="${DOCKER_IMAGE}:${ci_image_version}"
          echo "Image name: ${ci_image_name}"
          echo "Image version: ${ci_image_version}"
          echo "::set-output name=ci_image_name::"${ci_image_name}""
          echo "::set-output name=ci_image_version::"${ci_image_version}""
          - name: Create Sentry release
            uses: getsentry/action-release@v1
              env:
                SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
                SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
                SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
              with:
                environment: prod
                version: devices-service@${{ needs.version.outputs.tag_name }}
                ignore_missing: true
