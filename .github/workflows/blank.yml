# # This is a basic workflow to help you get started with Actions

# name: CI

# # Controls when the workflow will run
# on:
#   # Triggers the workflow on push or pull request events but only for the "master" branch
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v4

#       # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

#       # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
#   metadata:
#     runs-on: ubuntu-20.04
#     outputs:
#       ci_image_name: ${{ steps.ci_image_vars.outputs.ci_image_name }}
#       ci_image_version: ${{ steps.ci_image_vars.outputs.ci_image_version }}
#     steps:
#       - name: Generate CI docker image name and version
#         id: ci_image_vars
#         # e.g. refs/head/feature/my-branch => $DOCKER_IMAGE-ci:my-branch
#         run: |
#           export GITHUB_TOKEN=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
          
#       - name: Create Sentry release
#         uses: getsentry/action-release@v1
#         env:
#           SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
#           SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
#           SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
#         with:
#           environment: prod
#           version: devices-service@${{ needs.version.outputs.tag_name }}
#           ignore_missing: true

name: Fetch Latest Tag and Version

on:
  push:
    branches:
      - master  
  pull_request:
    branches:
      - master  
  workflow_dispatch:  

jobs:
  fetch_version:
    runs-on: ubuntu-latest  
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3 
      
      - name: Fetch All Tags
        run: git fetch --tags 
      
      - name: Get Latest Tag
        id: latest_tag
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
          echo "latest_tag=${latest_tag}" > latest_tag.txt

      - name: Upload Latest Tag as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: latest_tag 
          path: latest_tag.txt
      
      - name: Extract Version from Tag
        id: extract_version
        run: |
          # Assuming the tag follows semantic versioning (e.g., v1.0.0)
          version=$(echo ${{ steps.latest_tag.outputs.latest_tag }} | sed 's/^v//')  # Remove leading 'v'
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Display Latest Tag and Version
        run: |
          echo "Latest Tag: ${{ steps.latest_tag.outputs.latest_tag }}"
          echo "Version: ${{ steps.extract_version.outputs.version }}"

